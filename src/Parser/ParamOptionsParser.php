<?php

namespace Anexia\ParamParser\Parser;

use Anexia\ParamParser\Lexer\ParamOptionsLexer;
use Anexia\ParamParser\Token\Token;

/**
 * Class ParamOptionsParser
 *
 * Parses tokens of a param options expression. That is an expression that looks as follows:
 * "option1,option2,option3"
 *
 * @package Anexia\ParamParser\Parser
 */
class ParamOptionsParser extends AbstractParser
{
    /**
     * ParamOptionsParser constructor.
     *
     * @param ParamOptionsLexer $lexer  Lexer that produces the tokens for the parser.
     * @param int               $offset Offset to calculate absolute token position.
     */
    public function __construct(ParamOptionsLexer $lexer, int $offset)
    {
        parent::__construct($lexer, $offset);
    }

    /**
     * Parses the tokens generated by the lexer and returns an array of strings, where each
     * string is an option value. The order of the array equals the order of option values
     * within the expression.
     *
     * @return array
     * @throws ParserSyntaxException
     */
    public function parse(): array
    {
        $optionsList  = [];
        $currentToken = $this->eat([Token::TYPE_EOF, Token::TYPE_SEQUENCE,]);

        while ($currentToken->getTokenType() !== Token::TYPE_EOF) {
            $optionsList[] = $currentToken->getTokenValue();

            $this->eat([Token::TYPE_EOF, Token::TYPE_COMMA]);
            $currentToken = $this->eat([Token::TYPE_EOF, Token::TYPE_SEQUENCE]);
        }

        return $optionsList;
    }
}
