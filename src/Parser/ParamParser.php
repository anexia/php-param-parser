<?php

namespace Anexia\ParamParser\Parser;

use Anexia\ParamParser\Lexer\ParamLexer;
use Anexia\ParamParser\Lexer\ParamOptionsLexer;
use Anexia\ParamParser\Token\Token;

/**
 * Class ParamParser
 *
 * Parses tokens of a param expression. That is an expression that looks as follows:
 * "name:type:option1,option2,option3"
 *
 * @package Anexia\ParamParser\Parser
 */
class ParamParser extends AbstractParser
{
    /**
     * ParamParser constructor.
     *
     * @param ParamLexer $lexer  Lexer that produces the tokens for the parser.
     * @param int        $offset Offset to calculate absolute token position.
     */
    public function __construct(ParamLexer $lexer, int $offset)
    {
        parent::__construct($lexer, $offset);
    }

    /**
     * Parses the tokens generated by the lexer and returns an array containing the param configuration
     * of the expression. The first element of the array is the name of the param as a string. The second element
     * is the type of the param as a string. The type may be NULL. The third param is an array of strings, where each
     * element represents the option's value.
     *
     * @return array
     * @throws ParserSyntaxException
     */
    public function parse(): array
    {
        $paramNameToken = $this->eat([Token::TYPE_SEQUENCE]);
        $this->eat([Token::TYPE_EOF, Token::TYPE_COLON]);

        $paramTypeToken = $this->eat([Token::TYPE_EOF, Token::TYPE_SEQUENCE]);
        $this->eat([Token::TYPE_EOF, Token::TYPE_COLON]);

        $paramOptionsToken = $this->eat([Token::TYPE_EOF, Token::TYPE_SEQUENCE]);
        $this->eat([Token::TYPE_EOF]);

        $paramName    = $paramNameToken->getTokenValue();
        $paramType    = $paramTypeToken->getTokenValue();
        $paramOptions = $paramOptionsToken->getTokenValue();

        if ($paramOptionsToken->getTokenType() === Token::TYPE_SEQUENCE) {
            $paramOptionsParser = new ParamOptionsParser(
                new ParamOptionsLexer($paramOptionsToken->getTokenRawValue()),
                $paramOptionsToken->getTokenPosition() + $this->offset
            );
            $paramOptions       = $paramOptionsParser->parse();
        }

        return [
            $paramName,
            $paramType,
            $paramOptions,
        ];
    }
}
